@startuml

class WordBank {
    - List<String> wordList
    - String filePath
    + WordBank(String filePath)
    + void loadWords()
    + String getRandomWord(int minLength, int maxLength)
    + void addWord(String word)
}

interface WordFilter{
    + boolean filter(String word)
}

class Player {
    - String name
    - int score
    + Player(String name)
    + Player()
    + void increaseScore()
    + int getScore()
    + String getName()
    + String toString()
}

class Word {
    - String word
    - Set<Character> guessedLetters
    - String maskedWord
    + Word(String word)
    + boolean revealLetter(String guess)
    + boolean isGuessed()
    + String getMaskedWord()
    + String getWord()
    + int getLength()
}
class StatusBoard {
    - String currentWord
    - String[] currentHangman1
    - String[] currentHangman2
    - Player player1
    - Player player2
    + StatusBoard(String currentWord, String[] currentHangman1,
    String[] currentHangman2, Player player1, Player player2)
    + void updateStatusBoard(String currentWord, String[] currentHangman1,
    String[] currentHangman2 , Player player1, Player player2)
    + void displayStatusBoard()
}

class HangmanUI {
    - String[] hangman
    - int stage
    + HangmanUI
    + String[] createHangman()
    + void updateHangman(int stage)
    + void displayHangman(int incorrectGuesses)
    + String[] getHangman
}

class Timer {
    - int timeLeft
    - boolean running
    + Timer(int timeLeft)
    + void run()
    + void stopTimer()
}

class MultiplayerGame {
    - WordBank wordBank
    - Player player1
    - Player player2
    - Word word
    - int maxAttempts
    - int currentAttempts
    - HangmanUI hangmanUI
    - Timer timer
    + MultiplayerGame(String player1Name, String player2Name)
    + void start()
    + void playGame()
    + void addCustomWords()
    + void setDifficultyLevel(int choice)
    + int getMinLength(int difficulty)
    + int getMaxLength(int difficulty)
    + static void main(String[] args)
}

MultiplayerGame --> WordBank : uses
MultiplayerGame --> Player : has
MultiplayerGame --> Word : has
MultiplayerGame --> HangmanUI : uses
MultiplayerGame --> Timer : uses
WordBank --> WordFilter : uses
WordBank --> Word : provides
Word --> Player : interacts
MultiplayerGame --> StatusBoard : uses
StatusBoard --> Player : uses
StatusBoard --> HangmanUI : interacts

@enduml